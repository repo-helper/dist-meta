entry_points: {}
filename: idna-2.10-py2.py3-none-any.whl
has_license: false
metadata:
- - Metadata-Version
  - '2.1'
- - Name
  - idna
- - Version
  - '2.10'
- - Summary
  - Internationalized Domain Names in Applications (IDNA)
- - Home-page
  - https://github.com/kjd/idna
- - Author
  - Kim Davies
- - Author-email
  - kim@cynosure.com.au
- - License
  - BSD-like
- - Platform
  - UNKNOWN
- - Classifier
  - 'Development Status :: 5 - Production/Stable'
- - Classifier
  - 'Intended Audience :: Developers'
- - Classifier
  - 'Intended Audience :: System Administrators'
- - Classifier
  - 'License :: OSI Approved :: BSD License'
- - Classifier
  - 'Operating System :: OS Independent'
- - Classifier
  - 'Programming Language :: Python'
- - Classifier
  - 'Programming Language :: Python :: 2'
- - Classifier
  - 'Programming Language :: Python :: 2.7'
- - Classifier
  - 'Programming Language :: Python :: 3'
- - Classifier
  - 'Programming Language :: Python :: 3.4'
- - Classifier
  - 'Programming Language :: Python :: 3.5'
- - Classifier
  - 'Programming Language :: Python :: 3.6'
- - Classifier
  - 'Programming Language :: Python :: 3.7'
- - Classifier
  - 'Programming Language :: Python :: 3.8'
- - Classifier
  - 'Programming Language :: Python :: Implementation :: CPython'
- - Classifier
  - 'Programming Language :: Python :: Implementation :: PyPy'
- - Classifier
  - 'Topic :: Internet :: Name Service (DNS)'
- - Classifier
  - 'Topic :: Software Development :: Libraries :: Python Modules'
- - Classifier
  - 'Topic :: Utilities'
- - Requires-Python
  - '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
- - Description
  - "Internationalized Domain Names in Applications (IDNA)\n=====================================================\n\
    \nSupport for the Internationalised Domain Names in Applications\n(IDNA) protocol\
    \ as specified in `RFC 5891 <http://tools.ietf.org/html/rfc5891>`_.\nThis is the\
    \ latest version of the protocol and is sometimes referred to as\n“IDNA 2008”.\n\
    \nThis library also provides support for Unicode Technical Standard 46,\n`Unicode\
    \ IDNA Compatibility Processing <http://unicode.org/reports/tr46/>`_.\n\nThis\
    \ acts as a suitable replacement for the “encodings.idna” module that\ncomes with\
    \ the Python standard library, but only supports the\nold, deprecated IDNA specification\
    \ (`RFC 3490 <http://tools.ietf.org/html/rfc3490>`_).\n\nBasic functions are simply\
    \ executed:\n\n.. code-block:: pycon\n\n    # Python 3\n    >>> import idna\n\
    \    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n\
    \    ドメイン.テスト\n\n    # Python 2\n    >>> import idna\n    >>> idna.encode(u'ドメイン.テスト')\n\
    \    'xn--eckwd4c7c.xn--zckzah'\n    >>> print idna.decode('xn--eckwd4c7c.xn--zckzah')\n\
    \    ドメイン.テスト\n\nPackages\n--------\n\nThe latest tagged release version is published\
    \ in the PyPI repository:\n\n.. image:: https://badge.fury.io/py/idna.svg\n  \
    \ :target: http://badge.fury.io/py/idna\n\n\nInstallation\n------------\n\nTo\
    \ install this library, you can use pip:\n\n.. code-block:: bash\n\n    $ pip\
    \ install idna\n\nAlternatively, you can install the package using the bundled\
    \ setup script:\n\n.. code-block:: bash\n\n    $ python setup.py install\n\nThis\
    \ library works with Python 2.7 and Python 3.4 or later.\n\n\nUsage\n-----\n\n\
    For typical usage, the ``encode`` and ``decode`` functions will take a domain\n\
    name argument and perform a conversion to A-labels or U-labels respectively.\n\
    \n.. code-block:: pycon\n\n    # Python 3\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n\
    \    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n\
    \    ドメイン.テスト\n\nYou may use the codec encoding and decoding methods using the\n\
    ``idna.codec`` module:\n\n.. code-block:: pycon\n\n    # Python 2\n    >>> import\
    \ idna.codec\n    >>> print u'домена.испытание'.encode('idna')\n    xn--80ahd1agd.xn--80akhbyknj4f\n\
    \    >>> print 'xn--80ahd1agd.xn--80akhbyknj4f'.decode('idna')\n    домена.испытание\n\
    \nConversions can be applied at a per-label basis using the ``ulabel`` or ``alabel``\n\
    functions if necessary:\n\n.. code-block:: pycon\n\n    # Python 2\n    >>> idna.alabel(u'测试')\n\
    \    'xn--0zwm56d'\n\nCompatibility Mapping (UTS #46)\n+++++++++++++++++++++++++++++++\n\
    \nAs described in `RFC 5895 <http://tools.ietf.org/html/rfc5895>`_, the IDNA\n\
    specification no longer normalizes input from different potential ways a user\n\
    may input a domain name. This functionality, known as a “mapping”, is now\nconsidered\
    \ by the specification to be a local user-interface issue distinct\nfrom IDNA\
    \ conversion functionality.\n\nThis library provides one such mapping, that was\
    \ developed by the Unicode\nConsortium. Known as `Unicode IDNA Compatibility Processing\
    \ <http://unicode.org/reports/tr46/>`_,\nit provides for both a regular mapping\
    \ for typical applications, as well as\na transitional mapping to help migrate\
    \ from older IDNA 2003 applications.\n\nFor example, “Königsgäßchen” is not a\
    \ permissible label as *LATIN CAPITAL\nLETTER K* is not allowed (nor are capital\
    \ letters in general). UTS 46 will\nconvert this into lower case prior to applying\
    \ the IDNA conversion.\n\n.. code-block:: pycon\n\n    # Python 3\n    >>> import\
    \ idna\n    >>> idna.encode(u'Königsgäßchen')\n    ...\n    idna.core.InvalidCodepoint:\
    \ Codepoint U+004B at position 1 of 'Königsgäßchen' not allowed\n    >>> idna.encode('Königsgäßchen',\
    \ uts46=True)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n\
    \    königsgäßchen\n\nTransitional processing provides conversions to help transition\
    \ from the older\n2003 standard to the current standard. For example, in the original\
    \ IDNA\nspecification, the *LATIN SMALL LETTER SHARP S* (ß) was converted into\
    \ two\n*LATIN SMALL LETTER S* (ss), whereas in the current IDNA specification\
    \ this\nconversion is not performed.\n\n.. code-block:: pycon\n\n    # Python\
    \ 2\n    >>> idna.encode(u'Königsgäßchen', uts46=True, transitional=True)\n  \
    \  'xn--knigsgsschen-lcb0w'\n\nImplementors should use transitional processing\
    \ with caution, only in rare\ncases where conversion from legacy labels to current\
    \ labels must be performed\n(i.e. IDNA implementations that pre-date 2008). For\
    \ typical applications\nthat just need to convert labels, transitional processing\
    \ is unlikely to be\nbeneficial and could produce unexpected incompatible results.\n\
    \n``encodings.idna`` Compatibility\n++++++++++++++++++++++++++++++++\n\nFunction\
    \ calls from the Python built-in ``encodings.idna`` module are\nmapped to their\
    \ IDNA 2008 equivalents using the ``idna.compat`` module.\nSimply substitute the\
    \ ``import`` clause in your code to refer to the\nnew module name.\n\nExceptions\n\
    ----------\n\nAll errors raised during the conversion following the specification\
    \ should\nraise an exception derived from the ``idna.IDNAError`` base class.\n\
    \nMore specific exceptions that may be generated as ``idna.IDNABidiError``\nwhen\
    \ the error reflects an illegal combination of left-to-right and right-to-left\n\
    characters in a label; ``idna.InvalidCodepoint`` when a specific codepoint is\n\
    an illegal character in an IDN label (i.e. INVALID); and ``idna.InvalidCodepointContext``\n\
    when the codepoint is illegal based on its positional context (i.e. it is CONTEXTO\n\
    or CONTEXTJ but the contextual requirements are not satisfied.)\n\nBuilding and\
    \ Diagnostics\n------------------------\n\nThe IDNA and UTS 46 functionality relies\
    \ upon pre-calculated lookup tables for\nperformance. These tables are derived\
    \ from computing against eligibility criteria\nin the respective standards. These\
    \ tables are computed using the command-line\nscript ``tools/idna-data``.\n\n\
    This tool will fetch relevant tables from the Unicode Consortium and perform the\n\
    required calculations to identify eligibility. It has three main modes:\n\n* ``idna-data\
    \ make-libdata``. Generates ``idnadata.py`` and ``uts46data.py``,\n  the pre-calculated\
    \ lookup tables using for IDNA and UTS 46 conversions. Implementors\n  who wish\
    \ to track this library against a different Unicode version may use this tool\n\
    \  to manually generate a different version of the ``idnadata.py`` and ``uts46data.py``\n\
    \  files.\n\n* ``idna-data make-table``. Generate a table of the IDNA disposition\n\
    \  (e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix B.1 of RFC\n\
    \  5892 and the pre-computed tables published by `IANA <http://iana.org/>`_.\n\
    \n* ``idna-data U+0061``. Prints debugging output on the various properties\n\
    \  associated with an individual Unicode codepoint (in this case, U+0061), that\
    \ are\n  used to assess the IDNA and UTS 46 status of a codepoint. This is helpful\
    \ in debugging\n  or analysis.\n\nThe tool accepts a number of arguments, described\
    \ using ``idna-data -h``. Most notably,\nthe ``--version`` argument allows the\
    \ specification of the version of Unicode to use\nin computing the table data.\
    \ For example, ``idna-data --version 9.0.0 make-libdata``\nwill generate library\
    \ data against Unicode 9.0.0.\n\nNote that this script requires Python 3, but\
    \ all generated library data will work\nin Python 2.7.\n\n\nTesting\n-------\n\
    \nThe library has a test suite based on each rule of the IDNA specification, as\n\
    well as tests that are provided as part of the Unicode Technical Standard 46,\n\
    `Unicode IDNA Compatibility Processing <http://unicode.org/reports/tr46/>`_.\n\
    \nThe tests are run automatically on each commit at Travis CI:\n\n.. image:: https://travis-ci.org/kjd/idna.svg?branch=master\n\
    \   :target: https://travis-ci.org/kjd/idna\n"
name: idna
version: '2.10'
wheel:
- - Wheel-Version
  - '1.0'
- - Generator
  - bdist_wheel (0.33.6)
- - Root-Is-Purelib
  - 'true'
- - Tag
  - py2-none-any
- - Tag
  - py3-none-any
