entry_points: {}
filename: maturin-0.12.18_beta.1-py3-none-manylinux_2_12_x86_64.manylinux2010_x86_64.musllinux_1_1_x86_64.whl
has_license: false
metadata:
- - Metadata-Version
  - '2.1'
- - Name
  - maturin
- - Version
  - 0.12.18_beta.1
- - Classifier
  - 'Topic :: Software Development :: Build Tools'
- - Classifier
  - 'Programming Language :: Rust'
- - Classifier
  - 'Programming Language :: Python :: Implementation :: CPython'
- - Classifier
  - 'Programming Language :: Python :: Implementation :: PyPy'
- - Requires-Dist
  - tomli>=1.1.0 ; python_version<'3.11'
- - Requires-Dist
  - patchelf; extra == 'patchelf'
- - Requires-Dist
  - ziglang~=0.9.0; extra == 'zig'
- - Provides-Extra
  - patchelf
- - Provides-Extra
  - zig
- - Summary
  - Build and publish crates with pyo3, rust-cpython and cffi bindings as well as
    rust binaries as python packages
- - Keywords
  - python,cffi,packaging,pypi,pyo3
- - Home-Page
  - https://github.com/pyo3/maturin
- - Author
  - konstin <konstin@mailbox.org>, messense <messense@icloud.com>
- - Author-email
  - konstin <konstin@mailbox.org>, messense <messense@icloud.com>
- - License
  - MIT OR Apache-2.0
- - Requires-Python
  - '>=3.6'
- - Description-Content-Type
  - text/markdown; charset=UTF-8; variant=GFM
- - Project-URL
  - Changelog, https://maturin.rs/changelog.html
- - Project-URL
  - Documentation, https://maturin.rs
- - Project-URL
  - Source Code, https://github.com/PyO3/maturin
- - Project-URL
  - Issues, https://github.com/PyO3/maturin/issues
- - Description
  - "# Maturin\n\n_formerly pyo3-pack_\n\n[![Actions Status](https://github.com/PyO3/maturin/workflows/Run%20tests/badge.svg)](https://github.com/PyO3/maturin/actions)\n\
    [![FreeBSD](https://img.shields.io/cirrus/github/PyO3/maturin/main?style=flat-square)](https://cirrus-ci.com/github/PyO3/maturin)\n\
    [![Crates.io](https://img.shields.io/crates/v/maturin.svg?style=flat-square)](https://crates.io/crates/maturin)\n\
    [![PyPI](https://img.shields.io/pypi/v/maturin.svg?style=flat-square)](https://pypi.org/project/maturin/)\n\
    [![Maturin User Guide](https://img.shields.io/badge/user-guide-brightgreen?style=flat-square)](https://maturin.rs/)\n\
    [![Chat on Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square)](https://gitter.im/PyO3/Lobby)\n\
    \nBuild and publish crates with pyo3, rust-cpython and cffi bindings as well as\
    \ rust binaries as python packages.\n\nThis project is meant as a zero configuration\
    \ replacement for [setuptools-rust](https://github.com/PyO3/setuptools-rust) and\
    \ [milksnake](https://github.com/getsentry/milksnake).\nIt supports building wheels\
    \ for python 3.5+ on windows, linux, mac and freebsd, can upload them to [pypi](https://pypi.org/)\
    \ and has basic pypy support.\n\nCheck out the [User Guide](https://maturin.rs/)!\n\
    \n## Usage\n\nYou can either download binaries from the [latest release](https://github.com/PyO3/maturin/releases/latest)\
    \ or install it with pip:\n\n```shell\npip install maturin\n```\n\nThere are four\
    \ main commands:\n\n * `maturin new` creates a new cargo project with maturin\
    \ configured.\n * `maturin publish` builds the crate into python packages and\
    \ publishes them to pypi.\n * `maturin build` builds the wheels and stores them\
    \ in a folder (`target/wheels` by default), but doesn't upload them. It's possible\
    \ to upload those with [twine](https://github.com/pypa/twine) or `maturin upload`.\n\
    \ * `maturin develop` builds the crate and installs it as a python module directly\
    \ in the current virtualenv. Note that while `maturin develop` is faster, it doesn't\
    \ support all the feature that running `pip install` after `maturin build` supports.\n\
    \n`pyo3` and `rust-cpython` bindings are automatically detected, for cffi or binaries\
    \ you need to pass `-b cffi` or `-b bin`.\nmaturin doesn't need extra configuration\
    \ files and doesn't clash with an existing setuptools-rust or milksnake configuration.\n\
    You can even integrate it with testing tools such as [tox](https://tox.readthedocs.io/en/latest/).\n\
    There are examples for the different bindings in the `test-crates` folder.\n\n\
    The name of the package will be the name of the cargo project, i.e. the name field\
    \ in the `[package]` section of `Cargo.toml`.\nThe name of the module, which you\
    \ are using when importing, will be the `name` value in the `[lib]` section (which\
    \ defaults to the name of the package). For binaries, it's simply the name of\
    \ the binary generated by cargo.\n\n## Python packaging basics\n\nPython packages\
    \ come in two formats:\nA built form called wheel and source distributions (sdist),\
    \ both of which are archives.\nA wheel can be compatible with any python version,\
    \ interpreter (cpython and pypy, mainly), operating system and hardware architecture\
    \ (for pure python wheels),\ncan be limited to a specific platform and architecture\
    \ (e.g. when using ctypes or cffi) or to a specific python interpreter and version\
    \ on a specific architecture and operating system (e.g. with pyo3 and rust-cpython).\n\
    \nWhen using `pip install` on a package, pip tries to find a matching wheel and\
    \ install that. If it doesn't find one, it downloads the source distribution and\
    \ builds a wheel for the current platform,\nwhich requires the right compilers\
    \ to be installed. Installing a wheel is much faster than installing a source\
    \ distribution as building wheels is generally slow.\n\nWhen you publish a package\
    \ to be installable with `pip install`, you upload it to [pypi](https://pypi.org/),\
    \ the official package repository.\nFor testing, you can use [test pypi](https://test.pypi.org/)\
    \ instead, which you can use with `pip install --index-url https://test.pypi.org/simple/`.\n\
    Note that for publishing for linux, [you need to use the manylinux docker container](#manylinux-and-auditwheel),\
    \ while for publishing from your repository you can use the [messense/maturin-action\
    \ github action](https://github.com/messense/maturin-action).\n\n## pyo3 and rust-cpython\n\
    \nFor pyo3 and rust-cpython, maturin can only build packages for installed python\
    \ versions. On linux and mac, all python versions in `PATH` are used.\nIf you\
    \ don't set your own interpreters with `-i`, a heuristic is used to search for\
    \ python installations.\nOn windows all versions from the python launcher (which\
    \ is installed by default by the python.org installer) and all conda environments\
    \ except base are used. You can check which versions are picked up with the `list-python`\
    \ subcommand.\n\npyo3 will set the used python interpreter in the environment\
    \ variable `PYTHON_SYS_EXECUTABLE`, which can be used from custom build scripts.\
    \ Maturin can build and upload wheels for pypy with pyo3, even though only pypy3.7-7.3\
    \ on linux is tested.\n\n## Cffi\n\nCffi wheels are compatible with all python\
    \ versions including pypy. If `cffi` isn't installed and python is running inside\
    \ a virtualenv, maturin will install it, otherwise you have to install it yourself\
    \ (`pip install cffi`).\n\nmaturin uses cbindgen to generate a header file, which\
    \ can be customized by configuring cbindgen through a `cbindgen.toml` file inside\
    \ your project root. Alternatively you can use a build script that writes a header\
    \ file to `$PROJECT_ROOT/target/header.h`.\n\nBased on the header file maturin\
    \ generates a module which exports an `ffi` and a `lib` object.\n\n<details>\n\
    <summary>Example of a custom build script</summary>\n\n```rust\nuse cbindgen;\n\
    use std::env;\nuse std::path::Path;\n\nfn main() {\n    let crate_dir = env::var(\"\
    CARGO_MANIFEST_DIR\").unwrap();\n\n    let bindings = cbindgen::Builder::new()\n\
    \        .with_no_includes()\n        .with_language(cbindgen::Language::C)\n\
    \        .with_crate(crate_dir)\n        .generate()\n        .unwrap();\n   \
    \ bindings.write_to_file(Path::new(\"target\").join(\"header.h\"));\n}\n```\n\n\
    </details>\n\n## Mixed rust/python projects\n\nTo create a mixed rust/python project,\
    \ create a folder with your module name (i.e. `lib.name` in Cargo.toml) next to\
    \ your Cargo.toml and add your python sources there:\n\n```\nmy-project\n├── Cargo.toml\n\
    ├── my_project\n│   ├── __init__.py\n│   └── bar.py\n├── pyproject.toml\n├── Readme.md\n\
    └── src\n    └── lib.rs\n```\n\nYou can specify a different python source directory\
    \ in `Cargo.toml` by setting `package.metadata.maturin.python-source`, for example\n\
    \n```toml\n[package.metadata.maturin]\npython-source = \"python\"\n```\n\nthen\
    \ the project structure would look like this:\n\n```\nmy-project\n├── Cargo.toml\n\
    ├── python\n│   └── my_project\n│       ├── __init__.py\n│       └── bar.py\n\
    ├── pyproject.toml\n├── Readme.md\n└── src\n    └── lib.rs\n```\n\nmaturin will\
    \ add the native extension as a module in your python folder. When using develop,\
    \ maturin will copy the native library and for cffi also the glue code to your\
    \ python folder. You should add those files to your gitignore.\n\nWith cffi you\
    \ can do `from .my_project import lib` and then use `lib.my_native_function`,\
    \ with pyo3/rust-cpython you can directly `from .my_project import my_native_function`.\n\
    \nExample layout with pyo3 after `maturin develop`:\n\n```\nmy-project\n├── Cargo.toml\n\
    ├── my_project\n│   ├── __init__.py\n│   ├── bar.py\n│   └── my_project.cpython-36m-x86_64-linux-gnu.so\n\
    ├── Readme.md\n└── src\n    └── lib.rs\n```\n\n## Python metadata\n\nmaturin supports\
    \ [PEP 621](https://www.python.org/dev/peps/pep-0621/), you can specify python\
    \ package metadata in `pyproject.toml`.\nmaturin merges metadata from `Cargo.toml`\
    \ and `pyproject.toml`, `pyproject.toml` take precedence over `Cargo.toml`.\n\n\
    To specify python dependencies, add a list `dependencies` in a `[project]` section\
    \ in the `pyproject.toml`. This list is equivalent to `install_requires` in setuptools:\n\
    \n```toml\n[project]\nname = \"my-project\"\ndependencies = [\"flask~=1.1.0\"\
    , \"toml==0.10.0\"]\n```\n\nPip allows adding so called console scripts, which\
    \ are shell commands that execute some function in you program. You can add console\
    \ scripts in a section `[project.scripts]`.\nThe keys are the script names while\
    \ the values are the path to the function in the format `some.module.path:class.function`,\
    \ where the `class` part is optional. The function is called with no arguments.\
    \ Example:\n\n```toml\n[project.scripts]\nget_42 = \"my_project:DummyClass.get_42\"\
    \n```\n\nYou can also specify [trove classifiers](https://pypi.org/classifiers/)\
    \ in your Cargo.toml under `project.classifiers`:\n\n```toml\n[project]\nname\
    \ = \"my-project\"\nclassifiers = [\"Programming Language :: Python\"]\n```\n\n\
    ## Source distribution\n\nmaturin supports building through `pyproject.toml`.\
    \ To use it, create a `pyproject.toml` next to your `Cargo.toml` with the following\
    \ content:\n\n```toml\n[build-system]\nrequires = [\"maturin>=0.12,<0.13\"]\n\
    build-backend = \"maturin\"\n```\n\nIf a `pyproject.toml` with a `[build-system]`\
    \ entry is present, maturin will build a source distribution of your package,\
    \ unless `--no-sdist` is specified.\nThe source distribution will contain the\
    \ same files as `cargo package`. To only build a source distribution, pass `--interpreter`\
    \ without any values.\n\nYou can then e.g. install your package with `pip install\
    \ .`. With `pip install . -v` you can see the output of cargo and maturin.\n\n\
    You can use the options `compatibility`, `skip-auditwheel`, `bindings`, `strip`,\
    \ `cargo-extra-args` and `rustc-extra-args` under `[tool.maturin]` the same way\
    \ you would when running maturin directly.\nThe `bindings` key is required for\
    \ cffi and bin projects as those can't be automatically detected. Currently, all\
    \ builds are in release mode (see [this thread](https://discuss.python.org/t/pep-517-debug-vs-release-builds/1924)\
    \ for details).\n\nFor a non-manylinux build with cffi bindings you could use\
    \ the following:\n\n```toml\n[build-system]\nrequires = [\"maturin>=0.12,<0.13\"\
    ]\nbuild-backend = \"maturin\"\n\n[tool.maturin]\nbindings = \"cffi\"\ncompatibility\
    \ = \"linux\"\n```\n\n`manylinux` option is also accepted as an alias of `compatibility`\
    \ for backward compatibility with old version of maturin.\n\nTo include arbitrary\
    \ files in the sdist for use during compilation specify `sdist-include` as an\
    \ array of globs:\n\n```toml\n[tool.maturin]\nsdist-include = [\"path/**/*\"]\n\
    ```\n\nThere's a `maturin sdist` command for only building a source distribution\
    \ as workaround for [pypa/pip#6041](https://github.com/pypa/pip/issues/6041).\n\
    \n## Manylinux and auditwheel\n\nFor portability reasons, native python modules\
    \ on linux must only dynamically link a set of very few libraries which are installed\
    \ basically everywhere, hence the name manylinux.\nThe pypa offers special docker\
    \ images and a tool called [auditwheel](https://github.com/pypa/auditwheel/) to\
    \ ensure compliance with the [manylinux rules](https://www.python.org/dev/peps/pep-0571/#the-manylinux2010-policy).\n\
    If you want to publish widely usable wheels for linux pypi, **you need to use\
    \ a manylinux docker image**.\n\nThe Rust compiler since version 1.47 [requires\
    \ at least glibc 2.11](https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1470-2020-10-08),\
    \ so you need to use at least manylinux2010.\nFor publishing, we recommend enforcing\
    \ the same manylinux version as the image with the manylinux flag, e.g. use `--manylinux\
    \ 2014` if you are building in `quay.io/pypa/manylinux2014_x86_64`.\nThe [messense/maturin-action](https://github.com/messense/maturin-action)\
    \ github action already takes care of this if you set e.g. `manylinux: 2014`.\n\
    \nmaturin contains a reimplementation of auditwheel automatically checks the generated\
    \ library and gives the wheel the proper.\nIf your system's glibc is too new or\
    \ you link other shared libraries, it will assign the `linux` tag.\nYou can also\
    \ manually disable those checks and directly use native linux target with `--manylinux\
    \ off`.\n\nFor full manylinux compliance you need to compile in a CentOS docker\
    \ container. The [pyo3/maturin](https://ghcr.io/pyo3/maturin) image is based on\
    \ the manylinux2010 image,\nand passes arguments to the `maturin` binary. You\
    \ can use it like this:\n\n```\ndocker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin\
    \ build --release  # or other maturin arguments\n```\n\nNote that this image is\
    \ very basic and only contains python, maturin and stable rust. If you need additional\
    \ tools, you can run commands inside the manylinux container.\nSee [konstin/complex-manylinux-maturin-docker](https://github.com/konstin/complex-manylinux-maturin-docker)\
    \ for a small educational example or [nanoporetech/fast-ctc-decode](https://github.com/nanoporetech/fast-ctc-decode/blob/b226ea0f2b2f4f474eff47349703d57d2ea4801b/.github/workflows/publish.yml)\
    \ for a real world setup.\n\nmaturin itself is manylinux compliant when compiled\
    \ for the musl target.\n\n## Code\n\nThe main part is the maturin library, which\
    \ is completely documented and should be well integrable. The accompanying `main.rs`\
    \ takes care username and password for the pypi upload and otherwise calls into\
    \ the library.\n\nThe `sysconfig` folder contains the output of `python -m sysconfig`\
    \ for different python versions and platform, which is helpful during development.\n\
    \nYou need to install `cffi` and `virtualenv` (`pip install cffi virtualenv`)\
    \ to run the tests.\n\nThere are some optional hacks that can speed up the tests\
    \ (over 80s to 17s on my machine).\n1. By running `cargo build --release --manifest-path\
    \ test-crates/cargo-mock/Cargo.toml` you can activate a cargo cache avoiding to\
    \ rebuild the pyo3 test crates with every python version.\n2. Delete `target/test-cache`\
    \ to clear the cache (e.g. after changing a test crate) or remove `test-crates/cargo-mock/target/release/cargo`\
    \ to deactivate it.\n3. By running the tests with the `faster-tests` feature,\
    \ binaries are stripped and wheels are only stored and not compressed.\n"
name: maturin
version: 0.12.18b1
wheel:
- - Wheel-Version
  - '1.0'
- - Generator
  - maturin (0.12.18-beta.1)
- - Root-Is-Purelib
  - 'false'
- - Tag
  - py3-none-manylinux_2_12_x86_64.manylinux2010_x86_64.musllinux_1_1_x86_64
